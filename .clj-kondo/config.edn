{:config-paths
 ["../resources/clj-kondo.exports/com.github.camsaul/toucan2"
  "macros"]

 :linters
 {:refer-all
  {:exclude [clojure.test]}

  :unresolved-symbol
  {:exclude
   [->kebab-case
    (toucan2.tools.transformed-test/test-both-normal-and-magic-keys)]}

  :consistent-alias
  {:aliases {clojure.data                  data
             clojure.edn                   edn
             clojure.java.io               io
             clojure.pprint                pprint
             clojure.spec.alpha            s
             clojure.string                str
             clojure.walk                  walk
             honey.sql                     hsql
             honey.sql.helpers             hsql.helpers
             methodical.core               m
             next.jdbc                     next.jdbc
             next.jdbc.result-set          next.jdbc.rs
             potemkin                      p
             toucan.db                     t1.db
             toucan.models                 t1.models
             toucan.util.test              t1.u.test
             toucan2.connection            conn
             toucan2.delete                delete
             toucan2.execute               execute
             toucan2.insert                insert
             toucan2.instance              instance
             toucan2.jdbc.query            jdbc.query
             toucan2.jdbc.result-set       jdbc.rs
             toucan2.jdbc.row              jdbc.row
             toucan2.magic-map             magic-map
             toucan2.map-backend           map
             toucan2.map-backend.honeysql2 map.honeysql
             toucan2.model                 model
             toucan2.operation             op
             toucan2.protocols             protocols
             toucan2.query                 query
             toucan2.realize               realize
             toucan2.save                  save
             toucan2.select                select
             toucan2.tools.after           tools.after
             toucan2.tools.after-insert    after-insert
             toucan2.tools.after-select    after-select
             toucan2.tools.after-update    after-update
             toucan2.tools.before-delete   before-delete
             toucan2.tools.before-insert   before-insert
             toucan2.tools.before-select   before-select
             toucan2.tools.before-update   before-update
             toucan2.tools.compile         tools.compile
             toucan2.tools.default-fields  default-fields
             toucan2.tools.disallow        disallow
             toucan2.tools.hydrate         hydrate
             toucan2.tools.identity-query  identity-query
             toucan2.tools.transformed     transformed
             toucan2.tools.with-temp       with-temp
             toucan2.update                update
             toucan2.util                  u}}

  :refer
  {:level   :warning
   :exclude [clojure.test
             toucan.test-models.address
             toucan.test-models.category
             toucan.test-models.heroes
             toucan.test-models.phone-number
             toucan.test-models.user
             toucan.test-models.venue]}

  :docstring-leading-trailing-whitespace {:level :warning}
  :keyword-binding                       {:level :warning}
  :misplaced-docstring                   {:level :warning}
  :missing-body-in-when                  {:level :warning}
  :missing-else-branch                   {:level :warning}
  :namespace-name-mismatch               {:level :warning}
  :non-arg-vec-return-type-hint          {:level :warning}
  :reduce-without-init                   {:level :warning}
  :redundant-fn-wrapper                  {:level :warning}
  :shadowed-var                          {:level :warning}
  :single-key-in                         {:level :warning}
  :unsorted-required-namespaces          {:level :warning}
  :use                                   {:level :warning}
  :used-underscored-binding              {:level :warning}
  :warn-on-reflection                    {:level :warning}
  ;; :docstring-no-summary                 {:level :warning}
  ;; :missing-docstring                     {:level :warning}
  }

 :lint-as
 {potemkin/def-map-type clojure.core/defrecord
  potemkin/defprotocol+ clojure.core/defprotocol
  potemkin/defrecord+   clojure.core/defrecord
  potemkin/deftype+     clojure.core/deftype}

 :hooks
 {:analyze-call
  {}

  :macroexpand
  {toucan2.test/do-db-types macros.toucan2.test/do-db-types}}

 :config-in-comment
 {:linters {:unresolved-symbol {:level :off}}}

 :ns-groups
 [{:pattern "^toucan\\..*"
   :name    toucan-1}]

 #_:config-in-ns
 #_ {toucan-1
     {:linters
      {:deprecated-var {:level :off}}}}}
